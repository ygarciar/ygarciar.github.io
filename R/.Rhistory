edad <- 30
nombre <- "Ana"
sprintf("%s tiene %d años.", nombre, edad)
# Ajustar el ancho mínimo del campo
sprintf("El número es: %10d", 42)
# Generar el vector
vector_aleatorio <- sample(1:10, 100, replace = TRUE)
# Mostrar el vector
print(vector_aleatorio)
# a2 <- ...
hist(a2)
v3 <- c(2,3, 6, 2, 4, 12, 3, 1, 7, 14, 6, 2, 8 ,13)
v3 <- c(2,3, 6, 2, 4, 12, 3, 1, 7, 14, 6, 2, 8 ,13)
v3
v4 <- as.character(v3)
class(v4)
v4
library(tibble)
library(dplyr)
# Creación de un tibble (dataframe)
edad <- c(20,45, 34)
altura <- c(1.56,1.72, 1.9)
sexo <- c('Male','Male', 'Female')
tb <-tibble(edad, altura, sexo)
tb
source("~/DocenciaR/Material_ayuntamiento/pruebas_curso2/R_scripts/import_export.R")
# IMPORTACIÓN Y EXPORTACIÓN DE DATASETS
--------------------------------------
# carga de la librería PARA LECTURA DE FICHEROS DE TEXTO
library(readr)
## ---------------------------------------------------------------------------------------------------
# lectura de datos en un fichero csv
accidentes <- read_csv("../data/accidentes_bicicletas.csv",
col_types = cols(fecha = col_date(format = "%d/%m/%Y"),
hora  = col_time(format = "%H:%M:%S")))
accidentes
## ---------------------------------------------------------------------------------------------------
# lectura de datos en un fichero csv sin cabeceras
animals2 <- read_csv("../data/animals2.csv",
col_names = FALSE)
animals2
get(pwd)
getwd()
## ---------------------------------------------------------------------------------------------------
# lectura de datos en un fichero csv
accidentes <- read_csv("./data/accidentes_bicicletas.csv",
col_types = cols(fecha = col_date(format = "%d/%m/%Y"),
hora  = col_time(format = "%H:%M:%S")))
getwd()
getwd()
source("~/DocenciaR/Material_ayuntamiento/pruebas_curso2/R_scripts/import_export.R")
# IMPORTACIÓN Y EXPORTACIÓN DE DATASETS
--------------------------------------
# carga de la librería PARA LECTURA DE FICHEROS DE TEXTO
library(readr)
getwd()
## ---------------------------------------------------------------------------------------------------
# lectura de datos en un fichero csv
accidentes <- read_csv("./data/accidentes_bicicletas.csv",
col_types = cols(fecha = col_date(format = "%d/%m/%Y"),
hora  = col_time(format = "%H:%M:%S")))
accidentes
## ---------------------------------------------------------------------------------------------------
# lectura de datos en un fichero csv sin cabeceras
animals2 <- read_csv("./data/animals2.csv",
col_names = FALSE)
animals2
## ---------------------------------------------------------------------------------------------------
# lectura de datos en un fichero csv sin cabeceras
# incluimos los nombres de las columnas a mano
animals2 <- read_csv("./data/animals2.csv",
col_names = c('Nombre', 'Peso Cerebro', 'Peso cuerpo'))
animals2
## ---------------------------------------------------------------------------------------------------
# podemos actualizar los nombres de columnas
# una vez cargado el fichero
colnames(animals2) <- c('Nombre', 'Peso_Cerebro', 'Peso_Cuerpo')
animals2
## ---------------------------------------------------------------------------------------------------
# saltando filas
peliculas <- read_csv("./data/peliculas.csv",
col_types = cols(Estreno = col_integer()),
skip = 6)
peliculas
## ---------------------------------------------------------------------------------------------------
# Lectura de un fragmento del fichero
peliculas <- read_csv("./data/peliculas.csv",
col_types = cols(Estreno = col_integer()),
n_max = 2,
skip = 6)
peliculas
## ---------------------------------------------------------------------------------------------------
# Lectura de un subconjunto de columnas
accidentes <- read_csv("./data/accidentes_bicicletas.csv",
col_select = c('distrito', 'numero'),
n_max = 5)
accidentes
## ---------------------------------------------------------------------------------------------------
# Lectura de fichero a través de una URL
# ----------------------------------------
t <- read_delim("https://datos.madrid.es/egob/catalogo/300110-24-accidentes-bicicleta.csv",
delim = ";")
slice_head(t)
# ----------------------------------------------------
# Archivos Microsoft Excel ( .xls, .xlsx)
# ----------------------------------------------------
# Carga de la librería
library(readxl)
View(t)
## ---------------------------------------------------------------------------------------------------
# permite lista el nombre de las horas que hay
# en un libro Excel
excel_sheets("./data/clientes.xlsx")   # 2 hojas dentro del libro
## ---------------------------------------------------------------------------------------------------
# lectura de hoja excel y un rango de filas y columnas
df_excel <- read_excel(path="./data/clientes.xlsx",
sheet="Hoja2",
range="A1:C6")
df_excel
## -------------------------------------------------
# Exportar datos con write
## -------------------------------------------------
# tibble
t
## ---------------------------------------------------------------------------------------------------
# Escribimos l datos en el fichero volcado_1.csv
write_csv(x = t, file = 'procesado_1.csv')
## ----message=FALSE, warning=FALSE-------------------------------------------------------------------
# carga de librería
library(writexl)
## ---------------------------------------------------------------------------------------------------
# Escribimos los datos en el fichero t.xlsx
write_xlsx(x = t, path = 'procesado_2.xlsx')
source("~/DocenciaR/Material_ayuntamiento/pruebas_curso2/R_scripts/import_export.R")
source("~/DocenciaR/Material_ayuntamiento/pruebas_curso2/R_scripts/import_export.R")
source("~/DocenciaR/Material_ayuntamiento/pruebas_curso2/R_scripts/import_export.R")
source("~/DocenciaR/Material_ayuntamiento/pruebas_curso2/R_scripts/import_export.R", echo=TRUE)
## ---------------------------------------------------------------------------------------------------
# lectura de datos en un fichero csv
accidentes <- read_csv("./data/accidentes_bicicletas.csv",
col_types = cols(fecha = col_date(format = "%d/%m/%Y"),
hora  = col_time(format = "%H:%M:%S")))
accidentes
## ---------------------------------------------------------------------------------------------------
# lectura de datos en un fichero csv sin cabeceras
animals2 <- read_csv("./data/animals2.csv",
col_names = FALSE)
animals2
## Números integer
# -----------------
3L
## Consulta de tipos
---------------------
# devuelve la clase a la que pertenece un objeto
class(45L)
## Consulta de tipos
---------------------
# devuelve la clase a la que pertenece un objeto
class(45)
edad <- 34L
class(edad)
edad <- 34L
class(edad)
2 + 5
6 + 8 - 9
2.3 + 8    # la coma decimal se representa como un punto en R
2.3 + 8    # la coma decimal se representa como un punto en R
3L
# devuelve la clase a la que pertenece un objeto
typeof(4L)
# preguntamos si un objeto es integer (gama de funciones is.*)
is.integer(25L)
# Devuelve información del objeto (Tipo y valor)
str(25L)
library(dplyr)
## ---------------
d <- 1 / (10^30)
d
# Ojo con la comparación cuando el dato es double
library(dplyr)
near(d, 0)
d == 0
## Operadores = e <-
#----------------------
x <- 10
std(5, 4, 45, 5, 7)
mean(5, 4, 45, 5, 7)
dev(5, 4, 45, 5, 7)
var(5, 4, 45, 5, 7)
var(c(5, 4, 45, 5, 7))
sd(c(5, 4, 45, 5, 7))
suma_elementos <- function(x, y){
s <- x + y
return(s)
}
a <- 5
resultado <- suma_elementos(a, 8)
resultado
suma_elementos(a*3, 8)
# función que suma 3 números y devuelve el resultado
suma_elementos <- function(x, y, z){
m1 <- x + y
m2 <- m1 + z
return(m2)
}
# usamos la función definida anteriormente
suma_elementos(1,2,8)
# usamos la función definida anteriormente
suma_elementos(1,2)
# distancia entre los puntos (x1, y1) y (x2, y2)
distancia_eu2 <- function(x1, y1, x2 = 0, y2 = 0) {
r <- sqrt((x1 - x2)^2 + (y1 - y2)^2)
return(r)
}
distancia_eu2 <- function(x1, y1, x2 = 0, y2 = 0) {
r <- sqrt((x1 - x2)^2 + (y1 - y2)^2)
return(r)
}
distancia_eu2(1, 1, 2, 2)
distancia_eu2(4, 4)
distancia_eu2(1, 1, y2=8)
seno_coseno <- function(angulo){
seno <- sin(angulo)
coseno <- cos(angulo)
return (c(seno, coseno))
}
seno_coseno(pi)
system.time({
result <- sum(1:1000000)
})
microbenchmark(
sum = sum(1:1000000),
times = 100
)
library(microbenchmark)
microbenchmark(
sum = sum(1:1000000),
times = 100
)
## Midiendo tiempos
------------------------------------------
# Código a medir
system.time({ result <- sum(1:1000000) })
farenheit_a_celsius <- function(f) {if(!is.numeric(f)) {
stop("f no es un vector numeric.")}
stopifnot(f > -460)             #0 absoluto
centigrados <- ((f-32) * (5/9))
return(centigrados)
}
renv::status()
# crea una variable de tipo double y llámala x1
x1 = 9.4
x1 = 9.4
# Escribe la instrucción que calcula Raíz cúbica de 8
8 ^ 1/3
# Escribe la instrucción que calcula Raíz cúbica de 8
8 ^ (1/3)
valor_expresion <- function(x){
resultado <- 3/4 + 2 * (x^4 - 1/2)
return(resultado)
}
View(valor_expresion)
valor_expresion(5)
valor_expresion(3)
valor_expresion(5)
calcula_horas_minutos  <- function(minutos){
horas <- minutos %/% 60
return(horas)
}
calcula_horas_minutos(132)
calcula_horas_minutos  <- function(minutos){
horas <- minutos %/% 60
resto <- minutos %% 60
return(horas, resto)
}
calcula_horas_minutos(132)
calcula_horas_minutos  <- function(minutos){
horas <- minutos %/% 60
resto <- minutos %% 60
return(c(horas, resto))
}
calcula_horas_minutos(132)
source("~/DocenciaR/Proyectos_cv_ayuntamiento/Proyecto_cv2/R_scripts/ggplot.R", echo=TRUE)
source("~/DocenciaR/Proyectos_cv_ayuntamiento/Proyecto_cv2/R_scripts/ggplot.R", echo=TRUE)
renv::restore(confirm = FALSE)
source("~/DocenciaR/Proyectos_cv_ayuntamiento/Proyecto_cv2/R_scripts/ggplot.R", echo=TRUE)
install.packages("plotly")
#-----------------------------------------------------
# instalar librería tidyverse si no está ya instalada
if (!"tidyverse" %in% rownames(installed.packages())) {
cat("La librería tidyverse se va a instalar...\n")
install.packages("tidyverse")
} else {
cat("La librería tidyverse está instalada.\n")
}
source("~/DocenciaR/Proyectos_cv_ayuntamiento/Proyecto_cv2/R_scripts/ggplot.R", echo=TRUE)
renv::snapshot(confirm = FALSE)
renv::snapshot(confirm = FALSE)
renv::restore(confirm = FALSE)
library(survival, lib.loc = "C:/Users/Yolanda/AppData/Local/R/cache/R/renv/sandbox/windows/R-4.4/x86_64-w64-mingw32/e0da0d43")
remove.packages("survival", lib="C:/Users/Yolanda/AppData/Local/R/cache/R/renv/sandbox/windows/R-4.4/x86_64-w64-mingw32/e0da0d43")
source("~/DocenciaR/Proyectos_cv_ayuntamiento/Proyecto_cv3/R_scripts/tibbles.R", echo=TRUE)
source("~/DocenciaR/Proyectos_cv_ayuntamiento/Proyecto_cv3/R_scripts/tibbles.R", echo=TRUE)
tb <-tibble(edad, altura, sexo)
tb
## ---------------------------------------------------------------------------------------------------
# Creación de un dataframe a partir de un fichero de datos
## --------------------------------------------------------
filmin <- read_csv("./data/filmin.csv", n_max = 80)
filmin
## --------------------------------------------------------
## Características generales de dataframes
# ---------------------------------------------------------------------------------------------------
# Dimensión de un dataframe
dim(filmin)
## ---------------------------------------------------------------------------------------------------
# Número de columnas
length(filmin)
ncol(filmin)
# Número de filas
nrow(filmin)
# Nombres de las columnas
colnames(filmin)
## ---------------------------------------------------------------------------------------------------
View(filmin)
# primeros estadísticos
## --------------------------------------------------------
summary(filmin)
# Acceso a una columna
## -----------------------------------------
filmin$Genero
## Frecuencia de los valores de una columna
# ----------------------------------------
# frecuencia
table(filmin$Genero)
# distintos valores existentes en la columna genero
unique(filmin$Genero)
### Operaciones con filas: FILTER. SLICE_HEAD, SLICE_TAIL, SLICE_SAMPLE, ARRANGE
---------------------------------------------------------------------------------
filter(filmin, Genero == 'Drama')
## ---------------------------------------------------------------------------------------------------
filter(filmin, (Genero == 'Drama') & (Valoracion > 6))
## ---------------------------------------------------------------------------------------------------
df <-filter(filmin, Genero %in% c('Romántica' , 'Comedia'))
df
## ---------------------------------------------------------------------------------------------------
# mostrar un número determinado de filas
slice_head(filmin, n=2)  # muestra las 2 primeras filas
## ---------------------------------------------------------------------------------------------------
# muestra el 50% de las ultimas filas
slice_tail(filmin, prop=0.5)
## ---------------------------------------------------------------------------------------------------
# obtiene una muestra aleatoria de n filas (o proporción prop)
set.seed(1)  # Para que la muestra aleatoria sea reproducible
slice_sample(filmin, n = 3)
## ---------------------------------------------------------------------------------------------------
# Ordenar ascendente de 'número' y luego descendente de  'sexo'
df_ordenado <- arrange(filmin,  Anio, desc(Valoracion))
print(df_ordenado)
## ---------------------------------------------------------------------------------------------------
# Ordenar descendente de 'número' y luego ascendente de 'Genero'
df_ordenado <- arrange(filmin,  desc(Anio), Genero)
print(df_ordenado)
# Operaciones con columnas: SELECT, MUTATE, RENAME
## ---------------------------------------------------------------------------------------------------
a <- select(filmin, 2, 1)
slice_tail(a, n = 7)
## ---------------------------------------------------------------------------------------------------
a <- select(filmin, "Valoracion", "Genero")
slice_head(a, n = 5)
## ---------------------------------------------------------------------------------------------------
a <- select(filmin, 2:4)
slice_tail(a, n = 5)
## ---------------------------------------------------------------------------------------------------
inicio <-length(filmin)-2
fin <- length(filmin)
a <- select(filmin, inicio:fin)
slice_tail(a, n = 5)
## ---------------------------------------------------------------------------------------------------
a <- select(filmin, -(inicio:fin))
slice_tail(a, n = 5)
## ---------------------------------------------------------------------------------------------------
a <- select(filmin, starts_with("Ge"))
tail(a)
## ---------------------------------------------------------------------------------------------------
a <- select(filmin, ends_with("o"))
slice_tail(a, n = 5)
## ---------------------------------------------------------------------------------------------------
a <- select(filmin, contains("i"))
slice_tail(a, n = 5)
filmin <- mutate(filmin,
redondeo = round(Valoracion),  # nueva
escala5 = Valoracion / 2,      # nueva
Year  = as.character(Anio),    # modificamos el tipo de columna fecha
YY = str_sub(Year, 3, 4),      # nueva
Anio = NULL)                 # BORRADO DE COLUMNA
## ---------------------------------------------
slice_head(filmin, n = 10)
filmin <- rename(filmin, 'Round' = redondeo)
select(filmin, 5:6)
## --------------------------------------------
nuevos_nombres <- c(Title = 'Titulo',
Rate = 'Valoracion',
Genre = 'Genero')
filmin_2 <- rename(filmin, all_of(nuevos_nombres))
slice_head(filmin_2, n=5)
## ---------------------------------------------------------------------------------------------------
# Resumen de la estructura de un dataframe
glimpse(filmin)
summarise(filmin, media_val=mean(Valoracion , na.rm = TRUE),
count = n(),    #número de filas
)
## ---------------------------------------------------------------------------------------------------
summarise(filmin,
count_years = n_distinct(Year),   # Número de años distintos
total = n(), # número de filas
media = mean(Valoracion, na.rm = TRUE),# media de las valoraciones
min_val = min(Valoracion, na.rm = TRUE),
max_val = max(Valoracion))
## ---------------------------------------------------------------------------------------------------
# EJEMPLO 1: el número de valoraciones por  Genero,
grupos <- group_by(filmin, Genero)
summarise(grupos,
media = mean(Valoracion, na.rm =T))
## ---------------------------------------------------------------------------------------------------
# USANDO PIPES %>%
# EJEMPLO 1: el número de valoraciones por  Genero,
resultado <- filmin %>%
group_by(Genero) %>%
summarise(media = mean(Valoracion, na.rm =T))
resultado
## ---------------------------------------------------------------------------------------------------
# EJEMPLO 2: el número de valoraciones por Anio y Genero,
grupos <- group_by(filmin, Year, Genero)
res <-summarise(grupos,
numero_registros = n(),    # cuenta
q25 = quantile(Valoracion, 0.25, na.rm = T),
.groups = 'drop')
res
#  Operador pipe  %>%    -------------------------------
## -----------------------------------------------------
# EJEMPLO 3:
t1 <- select(filmin, -Titulo)
t2 <- filter(t1, Year %in% c(2017, 2015) )
t3 <- group_by(t2, Periodo = Year, Categoria = Genero )
t4 <- summarise(t3, total = sum(Valoracion, na.rm =T),
media = mean(Valoracion, na.rm =T),
.groups = 'drop')
t4
## ---------------------------------------------------------------------------------------------------
# EJEMPLO 3: USANDO PIPES
t4 <- filmin %>%
select(-Titulo) %>%
filter(Year %in% c('2017', '2015') ) %>%
group_by(Periodo = Year, Categoria = Genero ) %>%
summarise(total = sum(Valoracion, na.rm =T) ,
media = mean(Valoracion, na.rm =T),
.groups = 'drop')
t4
# Sobre los Valores NA
## ---------------------------------------------------------------------------------------------------
# Número de NA's en cada una de las columnas
colSums(is.na(filmin))
# Representación gráfica
barplot(colSums(is.na(filmin)))
## ---------------------------------------------------------------------------------------------------
summarise(filmin, media = mean(Valoracion))
## ---------------------------------------------------------------------------------------------------
# argumento na.rm que puede ser establecido en TRUE para omitir valores
# NA en los cálculos
summarise(filmin, media = mean(Valoracion, na.rm = T))
source("~/DocenciaR/Proyectos_cv_ayuntamiento/Proyecto_cv3/R_scripts/tibbles.R", echo=TRUE)
source("~/DocenciaR/Proyectos_cv_ayuntamiento/Proyecto_cv3/R_scripts/merge.R", echo=TRUE)
source("~/DocenciaR/Proyectos_cv_ayuntamiento/Proyecto_cv3/R_scripts/merge.R", echo=TRUE)
source("~/DocenciaR/Proyectos_cv_ayuntamiento/Proyecto_cv3/R_scripts/ggplot.R", echo=TRUE)
renv::snapshot(confirm = FALSE)
renv::restore()
library(survival, lib.loc = "C:/Users/Yolanda/AppData/Local/R/cache/R/renv/sandbox/windows/R-4.4/x86_64-w64-mingw32/e0da0d43")
remove.packages("survival", lib="C:/Users/Yolanda/AppData/Local/R/cache/R/renv/sandbox/windows/R-4.4/x86_64-w64-mingw32/e0da0d43")
remove.packages("survival", lib="C:/Users/Yolanda/AppData/Local/R/cache/R/renv/sandbox/windows/R-4.4/x86_64-w64-mingw32/e0da0d43")
detach("package:survival", unload = TRUE)
* installing *source* package 'survival' ...
renv::clean()
renv::snapshot(confirm = FALSE)
if (!"datos" %in% rownames(installed.packages())) {
cat("La librería datos se va a instalar...\n")
install.packages("datos")
} else {
cat("La librería datos está instalada.\n")
}
renv::status()
renv::restore()
install.packages("Rtools")
renv::snapshot(force = TRUE)
renv::status()
source("~/DocenciaR/Proyectos_cv_ayuntamiento/Proyecto_cv3/R_scripts/ggplot.R", echo=TRUE)
renv::restore(confirm = FALSE)
renv::restore(prompt = FALSE)
renv::status()
renv::restore(prompt = FALSE)
renv::status()
# IMPORTACIÓN Y EXPORTACIÓN DE DATASETS
# --------------------------------------
# carga de la librería PARA LECTURA DE FICHEROS DE TEXTO
library(readr)
## ---------------------------------------------------------------------------------------------------
# lectura de datos en un fichero csv
accidentes <- read_csv("./data/accidentes_bicicletas.csv",
col_types = cols(fecha = col_date(format = "%d/%m/%Y"),
hora  = col_time(format = "%H:%M:%S")))
accidentes
View(accidentes)
